#version 400 core

in vec3 position;
in vec2 texCoords;
in vec3 normal;

uniform mat4 transformationMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 lightPosition;
uniform vec3 cameraPosition;
uniform mat4 biasMatrix;

out vec2 passTexCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out vec3 pos;
out vec4 shadowCoord;

void main()
{
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	passTexCoords = texCoords;
	
	surfaceNormal = normalize((transformationMatrix * vec4(normal, 0)).xyz);
	toLightVector = normalize(lightPosition - worldPosition.xyz);
	toCameraVector = normalize(cameraPosition - worldPosition.xyz);
	pos = worldPosition.xyz;
	//toCameraVector = normalize((inverse(viewMatrix) * vec4(0, 0, 0, 1)).xyz - worldPosition.xyz);
	
	shadowCoord = biasMatrix * gl_Position;
}